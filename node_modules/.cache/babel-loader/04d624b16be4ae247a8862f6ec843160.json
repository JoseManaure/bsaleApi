{"ast":null,"code":"import _slicedToArray from \"/Users/jnanaure87/Desktop/Web_Personal_IC_ConBsaleProductos/web-personal-client-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jnanaure87/Desktop/Web_Personal_IC_ConBsaleProductos/web-personal-client-master/src/providers/AuthProvider.js\";\nimport React, { useState, useEffect, createContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nimport { getAccessTokenApi, getRefreshTokenApi, refreshAccessTokenApi, logout } from \"../api/auth\";\nexport const AuthContext = createContext();\nexport default function AuthProvider(props) {\n  const children = props.children;\n\n  const _useState = useState({\n    user: null,\n    isLoading: true\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  useEffect(() => {\n    checkUserLogin(setUser);\n  }, []);\n  return React.createElement(AuthContext.Provider, {\n    value: user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, children);\n}\n\nfunction checkUserLogin(setUser) {\n  const accessToken = getAccessTokenApi();\n\n  if (!accessToken) {\n    const refreshToken = getRefreshTokenApi();\n\n    if (!refreshToken) {\n      logout();\n      setUser({\n        user: null,\n        isLoading: false\n      });\n    } else {\n      refreshAccessTokenApi(refreshToken);\n    }\n  } else {\n    setUser({\n      isLoading: false,\n      user: jwtDecode(accessToken)\n    });\n  }\n}","map":{"version":3,"sources":["/Users/jnanaure87/Desktop/Web_Personal_IC_ConBsaleProductos/web-personal-client-master/src/providers/AuthProvider.js"],"names":["React","useState","useEffect","createContext","jwtDecode","getAccessTokenApi","getRefreshTokenApi","refreshAccessTokenApi","logout","AuthContext","AuthProvider","props","children","user","isLoading","setUser","checkUserLogin","accessToken","refreshToken"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,aAArC,QAA0D,OAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,iBADF,EAEEC,kBAFF,EAGEC,qBAHF,EAIEC,MAJF,QAKO,aALP;AAOA,OAAO,MAAMC,WAAW,GAAGN,aAAa,EAAjC;AAEP,eAAe,SAASO,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,QAClCC,QADkC,GACrBD,KADqB,CAClCC,QADkC;;AAAA,oBAElBX,QAAQ,CAAC;AAC/BY,IAAAA,IAAI,EAAE,IADyB;AAE/BC,IAAAA,SAAS,EAAE;AAFoB,GAAD,CAFU;AAAA;AAAA,QAEnCD,IAFmC;AAAA,QAE7BE,OAF6B;;AAO1Cb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,cAAc,CAACD,OAAD,CAAd;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEF,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCD,QAApC,CAAP;AACD;;AAED,SAASI,cAAT,CAAwBD,OAAxB,EAAiC;AAC/B,QAAME,WAAW,GAAGZ,iBAAiB,EAArC;;AAEA,MAAI,CAACY,WAAL,EAAkB;AAChB,UAAMC,YAAY,GAAGZ,kBAAkB,EAAvC;;AAEA,QAAI,CAACY,YAAL,EAAmB;AACjBV,MAAAA,MAAM;AACNO,MAAAA,OAAO,CAAC;AACNF,QAAAA,IAAI,EAAE,IADA;AAENC,QAAAA,SAAS,EAAE;AAFL,OAAD,CAAP;AAID,KAND,MAMO;AACLP,MAAAA,qBAAqB,CAACW,YAAD,CAArB;AACD;AACF,GAZD,MAYO;AACLH,IAAAA,OAAO,CAAC;AACND,MAAAA,SAAS,EAAE,KADL;AAEND,MAAAA,IAAI,EAAET,SAAS,CAACa,WAAD;AAFT,KAAD,CAAP;AAID;AACF","sourcesContent":["import React, { useState, useEffect, createContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nimport {\n  getAccessTokenApi,\n  getRefreshTokenApi,\n  refreshAccessTokenApi,\n  logout\n} from \"../api/auth\";\n\nexport const AuthContext = createContext();\n\nexport default function AuthProvider(props) {\n  const { children } = props;\n  const [user, setUser] = useState({\n    user: null,\n    isLoading: true\n  });\n\n  useEffect(() => {\n    checkUserLogin(setUser);\n  }, []);\n\n  return <AuthContext.Provider value={user}>{children}</AuthContext.Provider>;\n}\n\nfunction checkUserLogin(setUser) {\n  const accessToken = getAccessTokenApi();\n\n  if (!accessToken) {\n    const refreshToken = getRefreshTokenApi();\n\n    if (!refreshToken) {\n      logout();\n      setUser({\n        user: null,\n        isLoading: false\n      });\n    } else {\n      refreshAccessTokenApi(refreshToken);\n    }\n  } else {\n    setUser({\n      isLoading: false,\n      user: jwtDecode(accessToken)\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}