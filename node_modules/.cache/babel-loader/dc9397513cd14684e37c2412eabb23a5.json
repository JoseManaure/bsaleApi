{"ast":null,"code":"import { basePath, apiVersion } from \"./config\";\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function getAccessTokenApi() {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (!accessToken || accessToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(accessToken) ? null : accessToken;\n}\nexport function getRefreshTokenApi() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(refreshToken) ? null : refreshToken;\n}\nexport function refreshAccessTokenApi(refreshToken) {\n  const url = `${basePath}/${apiVersion}/refresh-access-token`;\n  const bodyObj = {\n    refreshToken: refreshToken\n  };\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(bodyObj),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  fetch(url, params).then(response => {\n    if (response.status !== 200) {\n      return null;\n    }\n\n    return response.json();\n  }).then(result => {\n    if (!result) {\n      logout();\n    } else {\n      const accessToken = result.accessToken,\n            refreshToken = result.refreshToken;\n      localStorage.setItem(ACCESS_TOKEN, accessToken);\n      localStorage.setItem(REFRESH_TOKEN, refreshToken);\n    }\n  });\n}\nexport function logout() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60;\n  const metaToken = jwtDecode(token);\n  const exp = metaToken.exp;\n  const now = (Date.now() + seconds) / 1000;\n  return now > exp;\n}","map":{"version":3,"sources":["/Users/jnanaure87/Desktop/Web_Personal_IC_ConBsaleProductos/web-personal-client-master/src/api/auth.js"],"names":["basePath","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessTokenApi","accessToken","localStorage","getItem","willExpireToken","getRefreshTokenApi","refreshToken","refreshAccessTokenApi","url","bodyObj","params","method","body","JSON","stringify","headers","fetch","then","response","status","json","result","logout","setItem","removeItem","token","seconds","metaToken","exp","now","Date"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAClC,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBN,YAArB,CAApB;;AAEA,MAAI,CAACI,WAAD,IAAgBA,WAAW,KAAK,MAApC,EAA4C;AAC1C,WAAO,IAAP;AACD;;AAED,SAAOG,eAAe,CAACH,WAAD,CAAf,GAA+B,IAA/B,GAAsCA,WAA7C;AACD;AAED,OAAO,SAASI,kBAAT,GAA8B;AACnC,QAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqBL,aAArB,CAArB;;AAEA,MAAI,CAACQ,YAAD,IAAiBA,YAAY,KAAK,MAAtC,EAA8C;AAC5C,WAAO,IAAP;AACD;;AAED,SAAOF,eAAe,CAACE,YAAD,CAAf,GAAgC,IAAhC,GAAuCA,YAA9C;AACD;AAED,OAAO,SAASC,qBAAT,CAA+BD,YAA/B,EAA6C;AAClD,QAAME,GAAG,GAAI,GAAEb,QAAS,IAAGC,UAAW,uBAAtC;AACA,QAAMa,OAAO,GAAG;AACdH,IAAAA,YAAY,EAAEA;AADA,GAAhB;AAGA,QAAMI,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAFO;AAGbM,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAHI,GAAf;AAQAC,EAAAA,KAAK,CAACR,GAAD,EAAME,MAAN,CAAL,CACGO,IADH,CACQC,QAAQ,IAAI;AAChB,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AACD,WAAOD,QAAQ,CAACE,IAAT,EAAP;AACD,GANH,EAOGH,IAPH,CAOQI,MAAM,IAAI;AACd,QAAI,CAACA,MAAL,EAAa;AACXC,MAAAA,MAAM;AACP,KAFD,MAEO;AAAA,YACGrB,WADH,GACiCoB,MADjC,CACGpB,WADH;AAAA,YACgBK,YADhB,GACiCe,MADjC,CACgBf,YADhB;AAELJ,MAAAA,YAAY,CAACqB,OAAb,CAAqB1B,YAArB,EAAmCI,WAAnC;AACAC,MAAAA,YAAY,CAACqB,OAAb,CAAqBzB,aAArB,EAAoCQ,YAApC;AACD;AACF,GAfH;AAgBD;AAED,OAAO,SAASgB,MAAT,GAAkB;AACvBpB,EAAAA,YAAY,CAACsB,UAAb,CAAwB3B,YAAxB;AACAK,EAAAA,YAAY,CAACsB,UAAb,CAAwB1B,aAAxB;AACD;;AAED,SAASM,eAAT,CAAyBqB,KAAzB,EAAgC;AAC9B,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG5B,SAAS,CAAC0B,KAAD,CAA3B;AAF8B,QAGtBG,GAHsB,GAGdD,SAHc,CAGtBC,GAHsB;AAI9B,QAAMC,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,OAAd,IAAyB,IAArC;AACA,SAAOG,GAAG,GAAGD,GAAb;AACD","sourcesContent":["import { basePath, apiVersion } from \"./config\";\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\nimport jwtDecode from \"jwt-decode\";\n\nexport function getAccessTokenApi() {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (!accessToken || accessToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(accessToken) ? null : accessToken;\n}\n\nexport function getRefreshTokenApi() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(refreshToken) ? null : refreshToken;\n}\n\nexport function refreshAccessTokenApi(refreshToken) {\n  const url = `${basePath}/${apiVersion}/refresh-access-token`;\n  const bodyObj = {\n    refreshToken: refreshToken\n  };\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(bodyObj),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  fetch(url, params)\n    .then(response => {\n      if (response.status !== 200) {\n        return null;\n      }\n      return response.json();\n    })\n    .then(result => {\n      if (!result) {\n        logout();\n      } else {\n        const { accessToken, refreshToken } = result;\n        localStorage.setItem(ACCESS_TOKEN, accessToken);\n        localStorage.setItem(REFRESH_TOKEN, refreshToken);\n      }\n    });\n}\n\nexport function logout() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60;\n  const metaToken = jwtDecode(token);\n  const { exp } = metaToken;\n  const now = (Date.now() + seconds) / 1000;\n  return now > exp;\n}\n"]},"metadata":{},"sourceType":"module"}